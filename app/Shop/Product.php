<?php

namespace App\Shop;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Session;
use TCG\Voyager\Traits\Translatable;

class Product extends Model
{
    use Translatable;
    protected $fillable = ['desc', 'name', 'images', 'main_image', 'orders_count','views_count', 'data', 'external_id', 'short_desc', 'url', 'page_title', 'page_description', 'price', 'price_sellout', 'active', 'is_new', 'attachments', 'stock', 'sku', 'country', 'sku_parrent', 'weight', 'in_package', 'baselinker_id', 'keywords', 'category_id', 'formats', 'is_printable'];
    protected $table = 'products';
    protected $translatable = ['desc', 'name', 'short_desc', 'page_title', 'page_description'];
    protected $appends = ['calculated', 'design_price', 'link', 'is_sellout'];
    protected $sortable = [['name' => 'Data dodania', 'value' => 'created_at'], ['name' => 'Cena', 'value' => 'price'], ['name' => 'Nazwa', 'value' => 'name'], ['name' => 'Nowość', 'value' => 'is_new']];
    use SoftDeletes;
    public function getIsSelloutAttribute(){
        return $this->calculated < $this->price;
    }
    public function getPriceAttribute($data){
        return number_format(floatval($data), 2, '.', '');
    }
    public function getFormatsAttribute($data){
        if(request()->route()->getPrefix() == '/admin'){
            return $data;
        }
        if(!$data) return [];
        return json_decode($data);
    }
    public function setIsPrintableAttribute($data){
        ($data == 'on')? $this->attributes['is_printable'] = 1 : $this->attributes['is_printable'] = 0;
    }
    public function getCalculatedAttribute()
    {
        if($this->price_sellout && $this->price_sellout < $this->price){
            return number_format($this->price_sellout, 2);
        }
        return number_format($this->price, 2);
    }
    public function getLinkAttribute(){
        return $this->getLink();
    }
    public function getDesignPriceAttribute()
    {
        return 25;
    }
    public function rates(){
        return $this->hasMany('App\Rate', 'foreign_key')->where('type', 'product');
    }
    public function categories(){
        return $this->belongsToMany('App\Shop\Category', 'product_categories');
    }
    public function attributes(){
        return $this->hasMany('App\Relations\ProductAttribute', 'product_id')->with('attribute');
    }
    public function delete()
    {
        $images = Images::where('product_id', $this->id)->get();
        DB::table('product_categories')->where('product_id', $this->id)->delete();
        Images::where('product_id', $this->id)->delete();
        Attribute::where('product_id', $this->id)->delete();
        DB::table('cross_selling')->where('first_product', $this->id)->orWhere('second_product', $this->id)->delete();
        foreach ($images as $image){
/*            unlink(storage_path('/app/public/products'))*/
        }
        return parent::delete(); // TODO: Change the autogenerated stub
    }
    public function getPrice(){
        return $this->price;
    }
    public function getImages(){
        $images = collect();
        if($this->images && $this->images != ''){
            $tmp = json_decode($this->images);
            foreach ($tmp as $t){
                $images->push($t);
            }
        }
        if($this->main_image){
            $images->prepend($this->main_image);
        }
        $images = $images->unique();
        if(count($images) == 0){
            $images->push('/products/default.jpg');
        }
        return $images;
    }
    public function getBrutto(){
        return number_format($this->price + ((23 / 100) * $this->price), 2);
    }
    public function discounts(){
        $d = Discounts::where('product_id', $this->id)->first();
        if(!$d) $d = Discounts::where('product_id', null)->first();
        return $d;
    }

    public function getLink(){
        return ($this->url)? route('produkty.show', ['produkty' => $this->url]) : route('produkty.show', ['produkty' => $this->id]);
    }

    public function variants(){
        return Attribute::where('product_id', $this->id)->join('variants', 'attributes.variant_id', 'variants.id')->select('attributes.*', 'variants.name')->get();
    }
  /*  public function hasAttribute($key, $value){
        if($key == 'page') return true;
        if(!Cache::has('product'.$this->id.'_attributes')){
            $attributes = Attribute::where('product_id', $this->id)->join('variants', 'attributes.variant_id', 'variants.id')->get();
            Cache::put('product'.$this->id.'_attributes', $attributes);
        }else{
            $attributes = Cache::get('product'.$this->id.'_attributes');
        }
        foreach ($attributes as $attr){
            if($attr->name == $key && $attr->value==$value) return true;
        }
        return false;
    }*/
    public function getRates(){
        $rates = Rate::where('product_id', $this->id)->get();
        if($rates && count($rates) > 0){
            $temp = 0;
            foreach ($rates as $rate){
                $temp = $temp + $rate->value;
            }
            $temp = $temp / count($rates);
        }else{
            $temp = 5;
        }
        return ['rate' => $temp, 'comments' => $rates, 'count' => count($rates)];
    }
    public static function getSortable(){
        $pr = new Product();
        return $pr->sortable;
    }
}
